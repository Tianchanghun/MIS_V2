#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from app.common.models import db

def fix_products_table_schema():
    """products ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏ Î∞è Ïò¨Î∞îÎ•∏ Ïª¨ÎüºÎ™Ö ÌååÏïÖ"""
    print("üîç products ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏")
    print("=" * 50)
    
    app = create_app()
    with app.app_context():
        try:
            # 1. products ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
            print("1Ô∏è‚É£ products ÌÖåÏù¥Î∏î Ïª¨Îüº ÌôïÏù∏")
            
            result = db.session.execute(db.text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'products' 
                ORDER BY ordinal_position
            """))
            
            columns = result.fetchall()
            print(f"   üìã products ÌÖåÏù¥Î∏î Ïª¨Îüº ({len(columns)}Í∞ú):")
            for col in columns:
                nullable = "NULL" if col[2] == "YES" else "NOT NULL"
                default = f", DEFAULT: {col[3]}" if col[3] else ""
                print(f"      {col[0]} ({col[1]}) {nullable}{default}")
            
            # 2. product_details ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
            print("\n2Ô∏è‚É£ product_details ÌÖåÏù¥Î∏î Ïª¨Îüº ÌôïÏù∏")
            
            result = db.session.execute(db.text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'product_details' 
                ORDER BY ordinal_position
            """))
            
            detail_columns = result.fetchall()
            print(f"   üìã product_details ÌÖåÏù¥Î∏î Ïª¨Îüº ({len(detail_columns)}Í∞ú):")
            for col in detail_columns:
                nullable = "NULL" if col[2] == "YES" else "NOT NULL"
                default = f", DEFAULT: {col[3]}" if col[3] else ""
                print(f"      {col[0]} ({col[1]}) {nullable}{default}")
            
            # 3. ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
            print("\n3Ô∏è‚É£ ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ ÌòÑÌô©")
            
            result = db.session.execute(db.text("""
                SELECT COUNT(*) as total_products FROM products
            """))
            total_products = result.fetchone()[0]
            print(f"   üìä ÌòÑÏû¨ Ï†úÌíà Ïàò: {total_products}Í∞ú")
            
            result = db.session.execute(db.text("""
                SELECT COUNT(*) as total_details FROM product_details
            """))
            total_details = result.fetchone()[0]
            print(f"   üìä ÌòÑÏû¨ ÏÉÅÏÑ∏ Ïàò: {total_details}Í∞ú")
            
            # 4. Ïò¨Î∞îÎ•∏ INSERT ÏøºÎ¶¨ Ï†úÏïà
            print("\n4Ô∏è‚É£ Ïò¨Î∞îÎ•∏ INSERT ÏøºÎ¶¨ Ï†úÏïà")
            
            # products ÌÖåÏù¥Î∏îÏö© INSERT Íµ¨ÏÑ±
            product_col_names = [col[0] for col in columns if col[0] not in ['id', 'created_at', 'updated_at']]
            products_insert_cols = ', '.join(product_col_names)
            products_insert_values = ', '.join([f':{col}' for col in product_col_names])
            
            print(f"   üîß products INSERT ÏøºÎ¶¨:")
            print(f"      Ïª¨Îüº: {products_insert_cols}")
            print(f"      Í∞í: {products_insert_values}")
            
            # product_details ÌÖåÏù¥Î∏îÏö© INSERT Íµ¨ÏÑ±  
            detail_col_names = [col[0] for col in detail_columns if col[0] not in ['id', 'created_at', 'updated_at']]
            details_insert_cols = ', '.join(detail_col_names)
            details_insert_values = ', '.join([f':{col}' for col in detail_col_names])
            
            print(f"\n   üîß product_details INSERT ÏøºÎ¶¨:")
            print(f"      Ïª¨Îüº: {details_insert_cols}")
            print(f"      Í∞í: {details_insert_values}")
            
            # 5. ÏÉòÌîå Ï†úÌíà ÌôïÏù∏ (ÏûàÎã§Î©¥)
            if total_products > 0:
                print("\n5Ô∏è‚É£ ÏÉòÌîå Ï†úÌíà Îç∞Ïù¥ÌÑ∞")
                
                result = db.session.execute(db.text("""
                    SELECT * FROM products LIMIT 3
                """))
                
                samples = result.fetchall()
                print(f"   üìã ÏÉòÌîå Ï†úÌíà ({len(samples)}Í∞ú):")
                for i, sample in enumerate(samples):
                    print(f"      {i+1}. ID: {sample[0]}, Ïù¥Î¶Ñ: {sample[2] if len(sample) > 2 else 'N/A'}")
            
        except Exception as e:
            print(f"‚ùå Ïò§Î•ò: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    fix_products_table_schema() 