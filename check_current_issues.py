#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÌòÑÏû¨ ÏãúÏä§ÌÖú Ïù¥Ïäà ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏
ÏΩîÎìú Í¥ÄÎ¶¨ depthÏôÄ ÏÉÅÌíàÍ¥ÄÎ¶¨ ÏÉÅÌÉú Ï†êÍ≤Ä
"""

from app.common.models import db, Code, Product
from app import create_app

def main():
    app = create_app()
    with app.app_context():
        print("="*60)
        print("üîç ÌòÑÏû¨ ÏãúÏä§ÌÖú Ïù¥Ïäà Î∂ÑÏÑù")
        print("="*60)
        
        # 1. ÏΩîÎìú ÍπäÏù¥ ÌòÑÌô© ÌôïÏù∏
        print("\nüìä ÏΩîÎìú ÍπäÏù¥(Depth) ÌòÑÌô©:")
        codes = Code.query.all()
        depth_stats = {}
        max_depth = 0
        
        for code in codes:
            depth = code.depth
            if depth not in depth_stats:
                depth_stats[depth] = 0
            depth_stats[depth] += 1
            max_depth = max(max_depth, depth)
        
        for depth in sorted(depth_stats.keys()):
            print(f"  Depth {depth}: {depth_stats[depth]:3d}Í∞ú")
        
        print(f"\n‚ö†Ô∏è  ÌòÑÏû¨ ÏµúÎåÄ ÍπäÏù¥: {max_depth} (Î†àÍ±∞ÏãúÎäî ÏµúÎåÄ 2-3 Í∂åÏû•)")
        
        # 2. ÍπäÏù¥Î≥Ñ ÏÉòÌîå ÏΩîÎìú ÌôïÏù∏
        print(f"\nüìã ÍπäÏù¥Î≥Ñ ÏÉòÌîå ÏΩîÎìú:")
        for depth in range(min(6, max_depth + 1)):
            samples = Code.query.filter_by(depth=depth).limit(3).all()
            if samples:
                print(f"  Depth {depth}:")
                for sample in samples:
                    parent_info = f" (Î∂ÄÎ™®: {sample.parent_seq})" if sample.parent_seq else ""
                    print(f"    - {sample.code} | {sample.code_name}{parent_info}")
        
        # 3. ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ ÌòÑÌô©
        print(f"\nüì¶ ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ ÌòÑÌô©:")
        total_products = Product.query.count()
        print(f"  Ï¥ù ÏÉÅÌíà Ïàò: {total_products}Í∞ú")
        
        # Î¨∏Ï†ú ÏÉÅÌíà ÌôïÏù∏ (null ÌïÑÎìúÎì§)
        products_with_issues = Product.query.filter(
            db.or_(
                Product.brand_code_seq.is_(None),
                Product.category_code_seq.is_(None),
                Product.type_code_seq.is_(None)
            )
        ).limit(10).all()
        
        if products_with_issues:
            print(f"  ‚ö†Ô∏è  Î¨∏Ï†ú ÏÉÅÌíà {len(products_with_issues)}Í∞ú Î∞úÍ≤¨:")
            for product in products_with_issues:
                issues = []
                if not product.brand_code_seq: issues.append("Î∏åÎûúÎìú ÏóÜÏùå")
                if not product.category_code_seq: issues.append("ÌíàÎ™© ÏóÜÏùå") 
                if not product.type_code_seq: issues.append("ÌÉÄÏûÖ ÏóÜÏùå")
                print(f"    - {product.product_name}: {', '.join(issues)}")
        else:
            print("  ‚úÖ ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± ÏñëÌò∏")
        
        # 4. ÏΩîÎìú Í∑∏Î£πÎ≥Ñ ÌòÑÌô©
        print(f"\nüìÅ Ï£ºÏöî ÏΩîÎìú Í∑∏Î£π ÌòÑÌô©:")
        main_groups = Code.query.filter_by(depth=0).all()
        for group in main_groups[:10]:  # ÏÉÅÏúÑ 10Í∞úÎßå
            child_count = Code.query.filter_by(parent_seq=group.seq).count()
            print(f"  - {group.code} ({group.code_name}): {child_count}Í∞ú ÌïòÏúÑÏΩîÎìú")
        
        # 5. Î†àÍ±∞ÏãúÏôÄ ÎπÑÍµê Î∂ÑÏÑù
        print(f"\nüîç Î†àÍ±∞Ïãú ÎπÑÍµê Î∂ÑÏÑù:")
        print(f"  Î†àÍ±∞Ïãú Íµ¨Ï°∞: Parent-Child 2-3Îã®Í≥Ñ (AdminController.cs Í∏∞Ï§Ä)")
        print(f"  ÌòÑÏû¨ Íµ¨Ï°∞: {max_depth}Îã®Í≥Ñ")
        
        if max_depth > 3:
            print(f"  ‚ö†Ô∏è  Í∂åÏû•ÏÇ¨Ìï≠: 3Îã®Í≥ÑÎ°ú Îã®ÏàúÌôî ÌïÑÏöî")
            print(f"  üìã 4Îã®Í≥Ñ Ïù¥ÏÉÅ ÏΩîÎìúÎì§:")
            deep_codes = Code.query.filter(Code.depth >= 4).limit(5).all()
            for code in deep_codes:
                print(f"    - Depth {code.depth}: {code.code} | {code.code_name}")
        
        print("\n" + "="*60)
        print("Î∂ÑÏÑù ÏôÑÎ£å")
        print("="*60)

if __name__ == '__main__':
    main() 